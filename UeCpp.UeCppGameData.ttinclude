<#@ include file="./ObjectModel.ttinclude" once="true" #>
<#@ include file="./Models/Enums.ttinclude" once="true" #>
<#@ include file="./Models/Formulas.ttinclude" once="true" #>
<#@ include file="./Models/Classes.ttinclude" once="true" #>
<#@ include file="./Models/GameData.ttinclude" once="true" #>
<#@ include file="./Models/Module.ttinclude" once="true" #>
<#@ include file="./Models/ExtensionFunctions.ttinclude" once="true" #>
<#
	this.GenerationEnvironment.Length = 0; // clean any whitespace before generation

	var optimizations = this.Optimizations ?? Array.Empty<SourceCodeGenerationOptimizations>();
	var context = new CodeGenerationContext(this.GameDataPath, new UeCppLanguage {
		GameDataClassName = this.GameDataClassName,
		ModuleName = UeCppLanguage.TrimTypePrefix(this.GameDataClassName),
	}) {
		ToolsName = System.Reflection.Assembly.GetEntryAssembly()?.GetName().Name ?? "UeCppGameDataGenerator.tt",
		ToolsVersion = this.GetType().Assembly.GetName().Version.ToString(),
		EagerReferenceResolution = optimizations.Contains(SourceCodeGenerationOptimizations.EagerReferenceResolution),
		RawReferences = optimizations.Contains(SourceCodeGenerationOptimizations.RawReferences),
		RawLocalizedStrings = optimizations.Contains(SourceCodeGenerationOptimizations.RawLocalizedStrings),
		DisablePatching = optimizations.Contains(SourceCodeGenerationOptimizations.DisablePatching),
		DisableStringPooling = optimizations.Contains(SourceCodeGenerationOptimizations.DisableStringPooling),
		DisableJsonSerialization = optimizations.Contains(SourceCodeGenerationOptimizations.DisableJsonSerialization),
		DisableMessagePackSerialization = optimizations.Contains(SourceCodeGenerationOptimizations.DisableMessagePackSerialization)
	};

	this.CheckTypeNames(context);
	this.PrepareCppBackingFields(context);

	foreach (var typeDef in context.ObjectModel.Types)
	{
		WriteClassHeader(typeDef, context);
		WriteClassImplementation(typeDef, context);
	}

	foreach (var enumDef in context.ObjectModel.Enums)
	{
		WriteEnumHeader(enumDef, context);
	}

	foreach (var formulaDef in context.ObjectModel.Formulas)
	{
		WriteFormulaHeader(formulaDef, context);
	}

	WriteGameDataClassHeader(context);
	WriteGameDataClassImplementation(context);

	WriteExtensionFunctions(context);

	WriteModuleHeader(context);
	WriteModuleImplementation(context);
	WriteModuleBuildScript(context);
#>

<#+
	private void PrepareCppBackingFields(CodeGenerationContext context)
	{
		foreach (var typeDef in context.ObjectModel.Types)
		{
			foreach (var propertyDef in typeDef.Properties)
			{
				if (propertyDef.DataType == DataType.Document)
				{
					propertyDef.BackingField.Type = propertyDef.Type = context.CppLanguage.MakePtrType(propertyDef.Type);
				}
			}
		}
	}

	private void WriteFileHeader()
	{
#>
//
// The source code was generated by the Charon, GameDevWare, 2024
// License: MIT
//
//------------------------------------------------------------------------------
// <auto-generated>
//	 This code was generated by a tool.
//	 Changes to this file may cause incorrect behavior and will be lost if
//	 the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
<#+
	}

	private void CheckTypeNames(CodeGenerationContext context)
	{
		if (context.TargetLanguage.DocumentClassName.StartsWith("U", StringComparison.Ordinal) == false)
		{
			context.TargetLanguage.DocumentClassName = "U" + UeCppLanguage.TrimTypePrefix(context.TargetLanguage.DocumentClassName);
			context.TargetLanguage.DocumentReferenceClassName = "F" + UeCppLanguage.TrimTypePrefix(context.TargetLanguage.DocumentClassName) + "Reference";
		}
		if (context.TargetLanguage.GameDataClassName.StartsWith("U", StringComparison.Ordinal) == false)
		{
			context.TargetLanguage.GameDataClassName = "U" + UeCppLanguage.TrimTypePrefix(context.TargetLanguage.GameDataClassName);
		}

		var projectSettingsDef = context.ObjectModel.Types.FirstOrDefault(typeDef => typeDef.Schema.Name == "ProjectSettings");
		if (projectSettingsDef != null)
		{
			projectSettingsDef.TypeName = context.TargetLanguage.GameDataClassName + "ProjectSettings";
		}
	}

	partial class CodeGenerationContext
	{
		public UeCppLanguage CppLanguage => (UeCppLanguage)this.TargetLanguage;
	}
#>

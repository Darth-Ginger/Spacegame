<#@ assembly name="System.Core, Culture=neutral, PublicKeyToken=b77a5c561934e089" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Text.RegularExpressions" #><#+

	//Copyright (c) 2011, Brendan Erwin and contributors. All rights reserved.

	//	Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:

	//	Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.
	//	Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.
	//	The names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.

	//THIS SOFTWARE IS PROVIDED BY Brendan Erwin and contributors ''AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL Brendan Erwin or contributors BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

	public static partial class Pluralizer
	{
		private static readonly EnglishInflector inflector = new EnglishInflector();

		public static string Pluralize(string value)
		{
			return inflector.Pluralize(value);
		}

		private class NounsRule : IEquatable<NounsRule>
		{
			private readonly int hashCode;
			private readonly string pattern;
			private readonly Regex regex;
			private readonly string replacement;

			public NounsRule(string pattern, string replacement)
			{
				if (string.IsNullOrEmpty(pattern))
					throw new ArgumentNullException("pattern");
				if (replacement == null)
					throw new ArgumentNullException("replacement");
				this.pattern = pattern;
				this.replacement = replacement;
				hashCode = 397 ^ this.replacement.GetHashCode() ^ this.pattern.GetHashCode();
				regex = CreateRegex();
			}
			public bool Equals(NounsRule other)
			{
				if (ReferenceEquals(null, other))
					return false;
				if (ReferenceEquals(this, other))
					return true;
				return Equals(other.pattern, pattern) && Equals(other.replacement, replacement);
			}
			public override bool Equals(object obj)
			{
				return Equals(obj as NounsRule);
			}
			public override int GetHashCode()
			{
				return hashCode;
			}
			private Regex CreateRegex()
			{
				return new Regex(pattern, RegexOptions.IgnoreCase | RegexOptions.Compiled);
			}
			public string Apply(string word)
			{
				if (!regex.IsMatch(word))
					return null;

				return regex.Replace(word, replacement);
			}
		}
		private sealed class EnglishInflector
		{
			private readonly List<NounsRule> plurals = new List<NounsRule>();
			private readonly List<NounsRule> singulars = new List<NounsRule>();
			private readonly HashSet<string> uncountables = new HashSet<string>();
			public EnglishInflector()
			{
				AddPlural("$", "s");
				AddPlural("s$", "s");
				AddPlural("(ax|test)is$", "$1es");
				AddPlural("(octop|vir)us$", "$1i");
				AddPlural("(alias|status)$", "$1es");
				AddPlural("(bu)s$", "$1ses");
				AddPlural("(buffal|tomat)o$", "$1oes");
				AddPlural("([ti])um$", "$1a");
				AddPlural("sis$", "ses");
				AddPlural("(?:([^f])fe|([lr])f)$", "$1$2ves");
				AddPlural("(hive)$", "$1s");
				AddPlural("([^aeiouy]|qu)y$", "$1ies");
				AddPlural("(x|ch|ss|sh)$", "$1es");
				AddPlural("(matr|vert|ind)ix|ex$", "$1ices");
				AddPlural("([m|l])ouse$", "$1ice");
				AddPlural("^(ox)$", "$1en");
				AddPlural("(quiz)$", "$1zes");

				AddSingular("s$", "");
				AddSingular("(n)ews$", "$1ews");
				AddSingular("([ti])a$", "$1um");
				AddSingular("((a)naly|(b)a|(d)iagno|(p)arenthe|(p)rogno|(s)ynop|(t)he)ses$", "$1$2sis");
				AddSingular("(^analy)ses$", "$1sis");
				AddSingular("([^f])ves$", "$1fe");
				AddSingular("(hive)s$", "$1");
				AddSingular("(tive)s$", "$1");
				AddSingular("([lr])ves$", "$1f");
				AddSingular("([^aeiouy]|qu)ies$", "$1y");
				AddSingular("(s)eries$", "$1eries");
				AddSingular("(m)ovies$", "$1ovie");
				AddSingular("(x|ch|ss|sh)es$", "$1");
				AddSingular("([m|l])ice$", "$1ouse");
				AddSingular("(bus)es$", "$1");
				AddSingular("(o)es$", "$1");
				AddSingular("(shoe)s$", "$1");
				AddSingular("(cris|ax|test)es$", "$1is");
				AddSingular("(octop|vir)i$", "$1us");
				AddSingular("(alias|status)es$", "$1");
				AddSingular("^(ox)en", "$1");
				AddSingular("(vert|ind)ices$", "$1ex");
				AddSingular("(matr)ices$", "$1ix");
				AddSingular("(quiz)zes$", "$1");

				AddIrregular("person", "people");
				AddIrregular("man", "men");
				AddIrregular("child", "children");
				AddIrregular("sex", "sexes");
				AddIrregular("move", "moves");

				AddUncountable("equipment");
				AddUncountable("information");
				AddUncountable("rice");
				AddUncountable("money");
				AddUncountable("species");
				AddUncountable("series");
				AddUncountable("fish");
				AddUncountable("sheep");
			}
			private string ApplyFirstMatchRule(IEnumerable<NounsRule> rules, string word)
			{
				var result = word;

				if (!uncountables.Contains(word.ToLower()))
					rules.Reverse().First(r => (result = r.Apply(word)) != null);
				return result;
			}
			private void AddIrregular(string singular, string plural)
			{
				AddPlural("(" + singular[0] + ")" + singular.Substring(1) + "$", "$1" + plural.Substring(1));
				AddSingular("(" + plural[0] + ")" + plural.Substring(1) + "$", "$1" + singular.Substring(1));
			}
			private void AddUncountable(string word)
			{
				uncountables.Add(word.ToLower());
			}
			private void AddPlural(string rule, string replacement)
			{
				plurals.Add(new NounsRule(rule, replacement));
			}
			private void AddSingular(string rule, string replacement)
			{
				singulars.Add(new NounsRule(rule, replacement));
			}
			public string Pluralize(string word)
			{
				return ApplyFirstMatchRule(plurals, word);
			}
			public string Singularize(string word)
			{
				return ApplyFirstMatchRule(singulars, word);
			}
		}
	}

#>
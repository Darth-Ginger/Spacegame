		#region Serialization: BSON
		private void ReadBson(<#= this.GameDataClassName #> gameData, Stream data, Stream[] patches, Encoding encoding, bool leaveOpen)
		{
			if (gameData == null) throw new ArgumentNullException("gameData");
			if (data == null) throw new ArgumentNullException("data");
			if (encoding == null) throw new ArgumentNullException("encoding");

			var gameDataPatch = default(Dictionary<string, object>);
			if (patches != null)
			{
				foreach(var patchStream in patches)
				{
					using (var patchBsonReader = new BsonReader(patchStream, leaveOpen))
					{
						gameDataPatch = MergeDocuments(gameDataPatch, patchBsonReader.ReadDocument());
					}
				}
			}

			using(var bsonReader = new BsonReader(data, leaveOpen))
			{
				bsonReader.ReadGameData(gameData, gameDataPatch);
			}
		}

		private class BsonReader : Reader, IDisposable
		{
			private const int DEFAULT_BUFFER_SIZE = ushort.MaxValue;
			private const int MAX_BINARY_LENGTH = 16 * 1024 * 1024;
			private const int MAX_STRING_LENGTH = 16 * 1024 * 1024;

			private static readonly DateTime Epoch = new DateTime(1970, 1, 1, 0, 0, 0, DateTimeKind.Utc);

			private struct Document
			{
				public readonly int Length;
				public readonly BsonType Type;
				public readonly int End;

				public Document(BsonType docType, int length, int end)
				{
					this.Type = docType;
					this.Length = length;
					this.End = end;
				}
			}

			private readonly Stream inputStream;
			private readonly bool leaveOpen;
			private readonly byte[] buffer;
			private readonly byte[] literalBuffer;
			private readonly EndianBitConverter bitConverter;
			private readonly Stack<Document> documents;
			private ReaderNode node;
			private int bufferOffset;
			private int bufferRead;
			private int bufferAvailable;
			private int totalBytesReaded;
			private BsonType memberType;

			private StrongBox<int> int32Box;
			private StrongBox<long> int64Box;
			private StrongBox<double> doubleBox;
			private StrongBox<decimal> decimalBox;
			private StrongBox<DateTime> dateBox;
			private StrongBox<DateTimeOffset> dateOffsetBox;
			private StrongBox<TimeSpan> timeSpanBox;
			private StrongBox<Guid> guidBox;
			private StrongBox<bool> trueBox;
			private StrongBox<bool> falseBox;

			public override int LineNumber { get { return 0; } }
			public override int ColumnNumber { get { return this.totalBytesReaded; } }
			public override ReaderNode Node { get { if (this.node.Token == ReaderToken.None) this.NextToken(); return this.node; } }

			public BsonReader(Stream stream, bool leaveOpen = false, int bufferSize = DEFAULT_BUFFER_SIZE)
			{
				if (stream == null) throw new ArgumentNullException("stream");

				if (bufferSize < DEFAULT_BUFFER_SIZE)
					bufferSize = DEFAULT_BUFFER_SIZE;

				this.inputStream = stream;
				this.leaveOpen = leaveOpen;
				this.buffer = new byte[bufferSize];
				this.literalBuffer = new byte[bufferSize];
				this.bufferOffset = 0;
				this.bufferRead = 0;
				this.bufferAvailable = 0;
				this.bitConverter = EndianBitConverter.Little;
				this.documents = new Stack<Document>();
			}

			public override bool NextToken()
			{
				var length = 0;
				var end = 0;
				if (this.documents.Count == 0)
				{
					if (!this.ReadToBuffer(4, throwOnEos: false))
					{
						this.node = new ReaderNode(ReaderToken.EndOfStream);
						return false;
					}
					length = this.bitConverter.ToInt32(this.buffer, this.bufferOffset);
					end = length <= 0 ? 0 : this.totalBytesReaded - this.bufferRead + length;
					var newDocument = new Document(BsonType.Document, length, end);
					this.documents.Push(newDocument);
					this.node = new ReaderNode(ReaderToken.BeginObject);
					return true;
				}

				var document = this.documents.Peek();
				if (this.memberType == BsonType.None)
				{
					this.ReadToBuffer(1, throwOnEos: true);
					memberType = (BsonType)this.buffer[this.bufferOffset];
					if (memberType != BsonType.None && document.Type == BsonType.Document)
					{
						var memberName = this.ReadCString();
						this.node = new ReaderNode(ReaderToken.Member, memberName);
						return true;
					}
					else if (memberType != BsonType.None)
					{
						this.SkipCString();
					}
				}

				var type = this.memberType;
				this.memberType = BsonType.None;
				switch (type)
				{
					case BsonType.Double:
						this.ReadToBuffer(8, throwOnEos: true);
						var doubleValue = this.bitConverter.ToDouble(this.buffer, this.bufferOffset);
						this.node = new ReaderNode(ReaderToken.Value, this.Box(doubleValue));
						return true;
					case BsonType.String:
						var stringValue = this.ReadUtf8String();
						this.node = new ReaderNode(ReaderToken.Value, stringValue);
						return true;
					case BsonType.Array:
					case BsonType.Document:
						this.ReadToBuffer(4, throwOnEos: true);
						length = this.bitConverter.ToInt32(this.buffer, this.bufferOffset);
						end = length <= 0 ? 0 : this.totalBytesReaded - this.bufferRead + length;
						var newDocument = new Document(type, length, end);
						this.documents.Push(newDocument);
						this.node = new ReaderNode(type == BsonType.Document ? ReaderToken.BeginObject : ReaderToken.BeginArray);
						return true;
					case BsonType.Binary:
						const int GUID_SIZE = 16;
						const int DECIMAL_SIZE = 16;
						const int DATE_TIME_SIZE = 16;
						const int DATE_TIME_OFFSET_SIZE = 16;

						this.ReadToBuffer(5, throwOnEos: true);
						length = this.bitConverter.ToInt32(this.buffer, this.bufferOffset);

						if (length > MAX_BINARY_LENGTH) throw ReaderException.BinaryDataIsTooLong(this, length, MAX_BINARY_LENGTH);
						if (length < 0) throw ReaderException.ReadingBrokenDocument(this, "negative size of binary data");

						var binaryType = (BsonBinaryType)this.buffer[this.bufferOffset + 4];
						switch (binaryType)
						{
							case BsonBinaryType.Decimal:
								if (length < DECIMAL_SIZE)
									throw ReaderException.ReadingBrokenDocument(this, "wrong size of binary data");
								var decimalValue = this.bitConverter.ToDecimal(this.buffer, this.bufferOffset);
								this.node = new ReaderNode(ReaderToken.Value, this.Box(decimalValue));
								return true;
							case BsonBinaryType.DateTime:
								if (length < DATE_TIME_SIZE)
									throw ReaderException.ReadingBrokenDocument(this, "wrong size of binary data");
								var dateTime = new DateTime(this.bitConverter.ToInt64(this.buffer, this.bufferOffset + 1), (DateTimeKind)this.buffer[this.bufferOffset]);
								this.node = new ReaderNode(ReaderToken.Value, this.Box(dateTime));
								return true;
							case BsonBinaryType.DateTimeOffset:
								if (length < DATE_TIME_OFFSET_SIZE)
									throw ReaderException.ReadingBrokenDocument(this, "wrong size of binary data");
								var ticks = this.bitConverter.ToInt64(this.buffer, this.bufferOffset);
								var offsetTicks = this.bitConverter.ToInt64(this.buffer, this.bufferOffset + 8);
								var dateTimeOffset = new DateTimeOffset(ticks, new TimeSpan(offsetTicks));
								this.node = new ReaderNode(ReaderToken.Value, this.Box(dateTimeOffset));
								return true;
							case BsonBinaryType.UUID:
								if (length != GUID_SIZE)
									throw ReaderException.ReadingBrokenDocument(this, "wrong size of binary data");

								unchecked
								{
									var guidValue = new Guid
									(
										(uint)(this.buffer[this.bufferOffset + 3] << 24 | this.buffer[this.bufferOffset + 2] << 16 | this.buffer[this.bufferOffset + 1] << 8 | this.buffer[this.bufferOffset + 0]),
										(ushort)(this.buffer[this.bufferOffset + 5] << 8 | this.buffer[this.bufferOffset + 4]),
										(ushort)(this.buffer[this.bufferOffset + 7] << 8 | this.buffer[this.bufferOffset + 6]),
										this.buffer[this.bufferOffset + 8],
										this.buffer[this.bufferOffset + 9],
										this.buffer[this.bufferOffset + 10],
										this.buffer[this.bufferOffset + 11],
										this.buffer[this.bufferOffset + 12],
										this.buffer[this.bufferOffset + 13],
										this.buffer[this.bufferOffset + 14],
										this.buffer[this.bufferOffset + 15]
									);

									this.node = new ReaderNode(ReaderToken.Value, this.Box(guidValue));
								}
								return true;
							case BsonBinaryType.Bytes:
							case BsonBinaryType.Function:
							case BsonBinaryType.BytesOld:
							case BsonBinaryType.UUIDOld:
							case BsonBinaryType.MD5:
							case BsonBinaryType.UserDefined:
							default:
								var bytes = this.ReadBytes(length, forceNewBuffer: true);
								this.node = new ReaderNode(ReaderToken.Value, bytes.Array);
								return true;
						}
					case BsonType.Undefined:
						this.node = new ReaderNode(ReaderToken.Null);
						return true;
					case BsonType.ObjectId:
						var objectIdStr = this.ReadObjectId();
						this.node = new ReaderNode(ReaderToken.Value, objectIdStr);
						return true;
					case BsonType.Boolean:
						this.ReadToBuffer(1, throwOnEos: true);
						var boolValue = this.buffer[this.bufferOffset] > 0;
						this.node = new ReaderNode(ReaderToken.Value, this.Box(boolValue));
						return true;
					case BsonType.DateTime:
						this.ReadToBuffer(8, throwOnEos: true);
						var dateTimeMilliseconds = this.bitConverter.ToInt64(this.buffer, this.bufferOffset);
						this.node = new ReaderNode(ReaderToken.Value, this.Box(Epoch.AddTicks(checked(dateTimeMilliseconds * TimeSpan.TicksPerMillisecond))));
						return true;
					case BsonType.Null:
						this.node = new ReaderNode(ReaderToken.Null);
						return true;
					case BsonType.Regex:
						var regexPattern = this.ReadCString();
						var regexOptions = this.ReadCString();
						this.node = new ReaderNode(ReaderToken.Value, string.Concat("/", regexPattern, "/", regexOptions));
						return true;
					case BsonType.Reference:
						var reference = this.ReadUtf8String();
						var referenceId = this.ReadObjectId();
						this.node = new ReaderNode(ReaderToken.Value, reference + " -> " + referenceId);
						return true;
					case BsonType.JavaScript:
						var javascriptCode = this.ReadUtf8String();
						this.node = new ReaderNode(ReaderToken.Value, javascriptCode);
						return true;
					case BsonType.JavaScriptWithScope:
						this.ReadToBuffer(4, throwOnEos: true);
						var javascriptScopedCode = this.ReadUtf8String();
						this.memberType = BsonType.Document;
						this.ReadAny(nextToken: false); // scope
						this.node = new ReaderNode(ReaderToken.Value, javascriptScopedCode);
						return true;
					case BsonType.Symbol:
						var symbolString = this.ReadUtf8String();
						this.node = new ReaderNode(ReaderToken.Value, symbolString);
						return true;
					case BsonType.Int32:
						this.ReadToBuffer(4, throwOnEos: true);
						var intValue = this.bitConverter.ToInt32(this.buffer, this.bufferOffset);
						this.node = new ReaderNode(ReaderToken.Value, this.Box(intValue));
						return true;
					case BsonType.Timestamp:
						this.ReadToBuffer(8, throwOnEos: true);
						var timestampSeconds = (this.bitConverter.ToInt64(this.buffer, this.bufferOffset) & uint.MaxValue);
						this.node = new ReaderNode(ReaderToken.Value, this.Box(Epoch.AddTicks(checked(timestampSeconds * TimeSpan.TicksPerSecond))));
						return true;
					case BsonType.Int64:
						this.ReadToBuffer(8, throwOnEos: true);
						var longValue = this.bitConverter.ToInt64(this.buffer, this.bufferOffset);
						this.node = new ReaderNode(ReaderToken.Value, this.Box(longValue));
						return true;
					case BsonType.MinKey:
						this.node = new ReaderNode(ReaderToken.Value, "min");
						return true;
					case BsonType.MaxKey:
						this.node = new ReaderNode(ReaderToken.Value, "max");
						return true;
					case BsonType.None:
						if (this.documents.Count == 0)
							goto default;

						document = this.documents.Pop();
						if (document.End != 0 && document.End != this.totalBytesReaded)
						{
							throw ReaderException.ReadingBrokenDocument(this, string.Format("invalid BSON document length '{0:##,###}' read, while actual size is '{1:##,###}'",
							document.Length, document.Length + (this.totalBytesReaded - document.End)));
						}
						this.node = new ReaderNode(document.Type == BsonType.Document ? ReaderToken.EndOfObject : ReaderToken.EndOfArray);
						return true;
					default:
						throw ReaderException.UnknownNotation(this, type.ToString());
				}
			}

			private void SkipCString()
			{
				this.bufferAvailable -= this.bufferRead;
				this.bufferOffset += this.bufferRead;
				this.bufferRead = 0;

				var length = 0;
				var originalColumnNumber = this.totalBytesReaded;

				while (true)
				{
					while (this.bufferAvailable > 0)
					{
						var isTerminated = this.buffer[this.bufferOffset] == 0;

						length++;
						this.bufferOffset++;
						this.bufferAvailable--;

						if (isTerminated)
						{
							this.totalBytesReaded = originalColumnNumber + length; // length includes trailing zero
							return;
						}
					}

					this.bufferOffset = 0;
					this.bufferAvailable = 0;
					this.ReadToBuffer(this.buffer.Length, false);
					this.bufferRead = 0;
					if (this.bufferAvailable == 0)
						throw ReaderException.UnterminatedStringLiteral(this);
				}
			}
			private string ReadCString()
			{
				this.bufferAvailable -= this.bufferRead;
				this.bufferOffset += this.bufferRead;
				this.bufferRead = 0;

				var literalBuffer = this.literalBuffer;
				var literalLength = 0;
				var literalOffset = 0;
				var originalColumnNumber = this.totalBytesReaded;
				while (true)
				{
					while (this.bufferAvailable > 0)
					{
						var isTerminated = this.buffer[this.bufferOffset] == 0;
						literalBuffer[literalOffset] = this.buffer[this.bufferOffset];

						literalOffset++;
						literalLength++;
						this.bufferOffset++;
						this.bufferAvailable--;

						if (isTerminated)
						{
							this.totalBytesReaded = originalColumnNumber + literalLength; // length includes trailing zero

<#
	if (this.DisableStringPooling == false)
	{
#>
							var knownStringValue = default(string);
							if (this.stringLookupTable != null && this.stringLookupTable.TryGetString(literalBuffer, 0, literalLength - 1, out knownStringValue))
							{
								return knownStringValue;
							}
<#
	}
#>

							return Encoding.UTF8.GetString(literalBuffer, 0, literalLength - 1);
						}
						else if (literalOffset >= literalBuffer.Length)
						{
							Array.Resize(ref literalBuffer, (int)(literalBuffer.Length * 1.5));
						}
					}

					this.bufferOffset = 0;
					this.bufferAvailable = 0;
					this.ReadToBuffer(this.buffer.Length, false);
					this.bufferRead = 0;

					if (this.bufferAvailable == 0)
					{
						throw ReaderException.UnterminatedStringLiteral(this);
					}
				}
			}
			private string ReadUtf8String()
			{
				this.ReadToBuffer(4, throwOnEos: true);
				var length = this.bitConverter.ToInt32(this.buffer, this.bufferOffset);

				if (length > MAX_STRING_LENGTH) throw ReaderException.StringLiteralIsTooLong(this, length, MAX_STRING_LENGTH);
				if (length < 0) throw ReaderException.ReadingBrokenDocument(this, "negative size of string literal");

				var strBytes = this.ReadBytes(length);

<#
	if (this.DisableStringPooling == false)
	{
#>
				var knownStringValue = default(string);
				if (this.stringLookupTable != null && this.stringLookupTable.TryGetString(strBytes.Array, strBytes.Offset, strBytes.Count, out knownStringValue))
				{
					return knownStringValue;
				}
<#
	}
#>

				return Encoding.UTF8.GetString(strBytes.Array, strBytes.Offset, strBytes.Count - 1);
			}
			private string ReadObjectId()
			{
				this.ReadToBuffer(12, throwOnEos: true);

				var timeStamp = this.bitConverter.ToUInt32(this.buffer, this.bufferOffset);
				var machineAndPid = this.bitConverter.ToUInt32(this.buffer, this.bufferOffset + 4);
				var pidAndIncrement = this.bitConverter.ToUInt32(this.buffer, this.bufferOffset + 8);
				var objectIdStr = string.Concat(timeStamp.ToString("X8"), machineAndPid.ToString("X8"), pidAndIncrement.ToString("X8"));

				return objectIdStr;
			}
			private bool ReadToBuffer(int bytesRequired, bool throwOnEos)
			{
				this.bufferAvailable -= this.bufferRead;
				this.bufferOffset += this.bufferRead;
				this.bufferRead = 0;

				if (this.bufferAvailable < bytesRequired)
				{
					if (this.bufferAvailable > 0)
						Buffer.BlockCopy(this.buffer, this.bufferOffset, this.buffer, 0, this.bufferAvailable);

					this.bufferOffset = 0;
					while (this.bufferAvailable < bytesRequired)
					{
						var read = this.inputStream.Read(this.buffer, this.bufferAvailable, this.buffer.Length - this.bufferAvailable);
						this.bufferAvailable += read;

						if (read != 0 || this.bufferAvailable >= bytesRequired)
							continue;

						if (throwOnEos)
							throw ReaderException.UnexpectedEndOfStream(this);
						else
							return false;
					}
				}

				this.bufferRead = bytesRequired;
				this.totalBytesReaded += bytesRequired;
				return true;
			}
			private ArraySegment<byte> ReadBytes(long bytesRequired, bool forceNewBuffer = false)
			{
				if (bytesRequired > int.MaxValue) throw new ArgumentOutOfRangeException("bytesRequired");

				this.bufferAvailable -= this.bufferRead;
				this.bufferOffset += this.bufferRead;
				this.bufferRead = 0;

				if (this.bufferAvailable >= bytesRequired && !forceNewBuffer)
				{
					var bytes = new ArraySegment<byte>(this.buffer, this.bufferOffset, (int)bytesRequired);

					this.bufferAvailable -= (int)bytesRequired;
					this.bufferOffset += (int)bytesRequired;
					this.totalBytesReaded += (int)bytesRequired;

					return bytes;
				}
				else
				{
					var bytes = new byte[bytesRequired];
					var bytesOffset = 0;
					if (this.bufferAvailable > 0 && bytesOffset < bytes.Length)
					{
						var bytesToCopy = Math.Min(bytes.Length - bytesOffset, this.bufferAvailable);
						Buffer.BlockCopy(this.buffer, this.bufferOffset, bytes, bytesOffset, bytesToCopy);

						bytesOffset += bytesToCopy;
						this.bufferOffset += bytesToCopy;

						this.bufferAvailable -= bytesToCopy;
						this.totalBytesReaded += bytesToCopy;
					}

					if (this.bufferAvailable == 0)
						this.bufferOffset = 0;

					while (bytesOffset < bytes.Length)
					{
						var read = this.inputStream.Read(bytes, bytesOffset, bytes.Length - bytesOffset);

						bytesOffset += read;
						this.totalBytesReaded += read;

						if (read == 0 && bytesOffset < bytes.Length)
							throw ReaderException.UnexpectedEndOfStream(this);
					}

					return new ArraySegment<byte>(bytes, 0, bytes.Length);
				}
			}

			private object Box(DateTime value)
			{
				if (this.dateBox == null)
					this.dateBox = new StrongBox<DateTime>(CultureInfo.InvariantCulture);

				this.dateBox.Store(value);
				return this.dateBox;
			}
			private object Box(DateTimeOffset value)
			{
				if (this.dateOffsetBox == null)
					this.dateOffsetBox = new StrongBox<DateTimeOffset>(CultureInfo.InvariantCulture);

				this.dateOffsetBox.Store(value);
				return this.dateOffsetBox;
			}
			private object Box(TimeSpan value)
			{
				if (this.timeSpanBox == null)
					this.timeSpanBox = new StrongBox<TimeSpan>(CultureInfo.InvariantCulture);

				this.timeSpanBox.Store(value);
				return this.timeSpanBox;
			}
			private object Box(Guid value)
			{
				if (this.guidBox == null)
					this.guidBox = new StrongBox<Guid>(CultureInfo.InvariantCulture);

				this.guidBox.Store(value);
				return this.guidBox;
			}
			private object Box(int value)
			{
				if (this.int32Box == null)
					this.int32Box = new StrongBox<int>(CultureInfo.InvariantCulture);

				this.int32Box.Store(value);

				return this.int32Box;
			}
			private object Box(long value)
			{
				if (this.int64Box == null)
					this.int64Box = new StrongBox<long>(CultureInfo.InvariantCulture);

				this.int64Box.Store(value);

				return this.int64Box;
			}
			private object Box(double value)
			{
				if (this.doubleBox == null)
					this.doubleBox = new StrongBox<double>(CultureInfo.InvariantCulture);

				this.doubleBox.Store(value);

				return this.doubleBox;
			}
			private object Box(decimal value)
			{
				if (this.decimalBox == null)
					this.decimalBox = new StrongBox<decimal>(CultureInfo.InvariantCulture);

				this.decimalBox.Store(value);

				return this.decimalBox;
			}
			private object Box(bool value)
			{
				if (value)
				{
					if (this.trueBox == null)
						this.trueBox = new StrongBox<bool>(true, CultureInfo.InvariantCulture);
					return trueBox;
				}
				else
				{
					if (this.falseBox == null)
						this.falseBox = new StrongBox<bool>(false, CultureInfo.InvariantCulture);
					return falseBox;
				}
			}

			public void Dispose()
			{
				if (this.leaveOpen == false)
					this.inputStream.Dispose();
			}

			public enum BsonBinaryType
			{
				Bytes = 0,
				Function = 1,
				BytesOld = 2,
				UUIDOld = 3,
				UUID = 4,
				MD5 = 5,
				UserDefined = 80,

				// 16 bytes
				Decimal = 120,
				// 16 bytes
				DateTime = 121,
				// 16 bytes
				DateTimeOffset = 122,
			}

			public enum BsonType : byte
			{
				None = 0,
				Double = 1,
				String = 2,
				Document = 3,
				Array = 4,
				Binary = 5,
				Undefined = 6,
				ObjectId = 7,
				Boolean = 8,
				DateTime = 9,
				Null = 10,
				Regex = 11,
				Reference = 12,
				JavaScript = 13,
				Symbol = 14,
				JavaScriptWithScope = 15,
				Int32 = 16,
				Timestamp = 17,
				Int64 = 18,
				MinKey = 255,
				MaxKey = 127
			}
		}
		#endregion

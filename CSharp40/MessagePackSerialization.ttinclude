		#region Serialization: Message Pack
		private void ReadMessagePack(<#= this.GameDataClassName #> gameData, Stream data, Stream[] patches, Encoding encoding, bool leaveOpen)
		{
			if (gameData == null) throw new ArgumentNullException("gameData");
			if (data == null) throw new ArgumentNullException("data");
			if (encoding == null) throw new ArgumentNullException("encoding");

			var gameDataPatch = default(Dictionary<string, object>);
			if (patches != null)
			{
				foreach(var patchStream in patches)
				{
					using(var patchMsgPackReader = new MessagePackReader(patchStream, leaveOpen))
					{
						gameDataPatch = MergeDocuments(gameDataPatch, patchMsgPackReader.ReadDocument());
					}
				}
			}

			using (var msgPackReader = new MessagePackReader(data, leaveOpen))
			{
				msgPackReader.ReadGameData(gameData, gameDataPatch);
			}
		}

		private sealed class MessagePackReader : Reader, IDisposable
		{
			private const int DEFAULT_BUFFER_SIZE = ushort.MaxValue;
			private const int MAX_BINARY_LENGTH = 16 * 1024 * 1024;
			private const int MAX_STRING_LENGTH = 16 * 1024 * 1024;

			internal struct Map
			{
				public ReaderToken Token;
				public long Counter;
			}

			private readonly Stream inputStream;
			private readonly bool leaveOpen;
			private readonly byte[] buffer;
			private readonly EndianBitConverter bitConverter;
			private readonly Stack<Map> maps;
			private ReaderNode node;
			private int bufferOffset;
			private int bufferReaded;
			private int bufferAvailable;
			private int totalBytesReaded;

			private StrongBox<int> int32Box;
			private StrongBox<uint> uInt32Box;
			private StrongBox<long> int64Box;
			private StrongBox<ulong> uInt64Box;
			private StrongBox<float> singleBox;
			private StrongBox<double> doubleBox;
			private StrongBox<decimal> decimalBox;
			private StrongBox<DateTime> dateBox;
			private StrongBox<DateTimeOffset> dateOffsetBox;
			private StrongBox<TimeSpan> timeSpanBox;
			private StrongBox<Guid> guidBox;
			private StrongBox<bool> trueBox;
			private StrongBox<bool> falseBox;

			public override int LineNumber { get { return 0; } }
			public override int ColumnNumber { get { return this.totalBytesReaded; } }
			public override ReaderNode Node { get { if (this.node.Token == ReaderToken.None) this.NextToken(); return this.node; } }

			public MessagePackReader(Stream stream, bool leaveOpen = false, int bufferSize = DEFAULT_BUFFER_SIZE)
			{
				if (stream == null) throw new ArgumentNullException("stream");

				if (bufferSize < DEFAULT_BUFFER_SIZE)
					bufferSize = DEFAULT_BUFFER_SIZE;

				this.inputStream = stream;
				this.leaveOpen = leaveOpen;
				this.buffer = new byte[bufferSize];
				this.bufferOffset = 0;
				this.bufferReaded = 0;
				this.bufferAvailable = 0;
				this.bitConverter = EndianBitConverter.Big;
				this.maps = new Stack<Map>();
			}

			public override bool NextToken()
			{
				if (this.maps.Count > 0 && this.maps.Peek().Counter == 0)
				{
					var closingToken = this.maps.Pop();
					this.node = new ReaderNode(closingToken.Token);

					this.DecrementClosingTokenCounter();
					return true;
				}

				if (!this.ReadToBuffer(1, throwOnEos: false))
				{
					this.node = new ReaderNode(ReaderToken.EndOfStream);
					return false;
				}

				var formatValue = buffer[this.bufferOffset];
				if (formatValue >= (byte)MessagePackType.FixArrayStart && formatValue <= (byte)MessagePackType.FixArrayEnd)
				{
					var arrayCount = formatValue - (byte)MessagePackType.FixArrayStart;

					this.maps.Push(new Map { Token = ReaderToken.EndOfArray, Counter = arrayCount + 1 });
					this.node = new ReaderNode(ReaderToken.BeginArray);
				}
				else if (formatValue >= (byte)MessagePackType.FixStrStart && formatValue <= (byte)MessagePackType.FixStrEnd)
				{
					var strCount = formatValue - (byte)MessagePackType.FixStrStart;
					var strBytes = this.ReadBytes(strCount);

					var token = ReaderToken.Value;
					if (this.maps.Count > 0)
					{
						var closingToken = this.maps.Peek();
						if (closingToken.Token == ReaderToken.EndOfObject && closingToken.Counter > 0 && closingToken.Counter % 2 == 0)
							token = ReaderToken.Member;
					}

					var strValue = default(string);

<#
	if (this.DisableStringPooling == false)
	{
#>
					if (this.stringLookupTable == null || this.stringLookupTable.TryGetString(strBytes.Array, strBytes.Offset, strBytes.Count, out strValue) == false)
<#
	}
#>
					{
						strValue = Encoding.UTF8.GetString(strBytes.Array, strBytes.Offset, strBytes.Count);
					}

					this.node = new ReaderNode(token, strValue);
				}
				else if (formatValue >= (byte)MessagePackType.FixMapStart && formatValue <= (byte)MessagePackType.FixMapEnd)
				{
					var mapCount = formatValue - (byte)MessagePackType.FixMapStart;
					this.maps.Push(new Map { Token = ReaderToken.EndOfObject, Counter = mapCount * 2 + 1 });
					this.node = new ReaderNode(ReaderToken.BeginObject);
				}
				else if (formatValue >= (byte)MessagePackType.NegativeFixIntStart)
				{
					var value = unchecked((sbyte)formatValue);
					this.node = new ReaderNode(ReaderToken.Value, this.Box(value));
				}
				else if (formatValue <= (byte)MessagePackType.PositiveFixIntEnd)
				{
					var value = unchecked((byte)formatValue);
					this.node = new ReaderNode(ReaderToken.Value, this.Box(value));
				}
				else
				{
					switch ((MessagePackType)formatValue)
					{
						case MessagePackType.Nil:
							this.node = new ReaderNode(ReaderToken.Null);
							break;
						case MessagePackType.Array16:
						case MessagePackType.Array32:
							var arrayCount = 0L;
							if (formatValue == (int)MessagePackType.Array16)
							{
								this.ReadToBuffer(2, throwOnEos: true);
								arrayCount = bitConverter.ToUInt16(this.buffer, this.bufferOffset);
							}
							else if (formatValue == (int)MessagePackType.Array32)
							{
								this.ReadToBuffer(4, throwOnEos: true);
								arrayCount = bitConverter.ToUInt32(this.buffer, this.bufferOffset);
							}

							if (arrayCount < 0) throw ReaderException.ReadingBrokenDocument(this, "negative size of array");

							this.maps.Push(new Map { Token = ReaderToken.EndOfArray, Counter = arrayCount + 1 });
							this.node = new ReaderNode(ReaderToken.BeginArray);
							break;
						case MessagePackType.Map16:
						case MessagePackType.Map32:
							var mapCount = 0L;
							if (formatValue == (int)MessagePackType.Map16)
							{
								this.ReadToBuffer(2, throwOnEos: true);
								mapCount = bitConverter.ToUInt16(this.buffer, this.bufferOffset);
							}
							else if (formatValue == (int)MessagePackType.Map32)
							{
								this.ReadToBuffer(4, throwOnEos: true);
								mapCount = bitConverter.ToUInt32(this.buffer, this.bufferOffset);
							}

							if (mapCount < 0) throw ReaderException.ReadingBrokenDocument(this, "negative size of map");

							this.maps.Push(new Map { Token = ReaderToken.EndOfObject, Counter = mapCount * 2 + 1 });
							this.node = new ReaderNode(ReaderToken.BeginObject);
							break;
						case MessagePackType.Str16:
						case MessagePackType.Str32:
						case MessagePackType.Str8:
							var strBytesCount = 0L;
							if (formatValue == (int)MessagePackType.Str8)
							{
								this.ReadToBuffer(1, throwOnEos: true);
								strBytesCount = this.buffer[this.bufferOffset];
							}
							else if (formatValue == (int)MessagePackType.Str16)
							{
								this.ReadToBuffer(2, throwOnEos: true);
								strBytesCount = bitConverter.ToUInt16(this.buffer, this.bufferOffset);
							}
							else if (formatValue == (int)MessagePackType.Str32)
							{
								this.ReadToBuffer(4, throwOnEos: true);
								strBytesCount = bitConverter.ToUInt32(this.buffer, this.bufferOffset);
							}

							var token = ReaderToken.Value;
							if (this.maps.Count > 0)
							{
								var closingToken = this.maps.Peek();
								if (closingToken.Token == ReaderToken.EndOfObject && closingToken.Counter > 0 && closingToken.Counter % 2 == 0)
									token = ReaderToken.Member;
							}

							if (strBytesCount > MAX_STRING_LENGTH) throw ReaderException.StringLiteralIsTooLong(this, (int)strBytesCount, MAX_STRING_LENGTH);
							if (strBytesCount < 0) throw ReaderException.ReadingBrokenDocument(this, "negative size of string");

							var strBytes = this.ReadBytes(strBytesCount);
<#
	if (this.DisableStringPooling == false)
	{
#>
							var knownStringValue = default(string);
							if (this.stringLookupTable != null && this.stringLookupTable.TryGetString(strBytes.Array, strBytes.Offset, strBytes.Count, out knownStringValue))
							{
								this.node = new ReaderNode(token, knownStringValue);
								break;
							}
<#
	}
#>
							var stringValue = Encoding.UTF8.GetString(strBytes.Array, strBytes.Offset, strBytes.Count);
							this.node = new ReaderNode(token, stringValue);
							break;
						case MessagePackType.Bin32:
						case MessagePackType.Bin16:
						case MessagePackType.Bin8:
							var bytesCount = 0L;
							if (formatValue == (int)MessagePackType.Bin8)
							{
								this.ReadToBuffer(1, throwOnEos: true);
								bytesCount = this.buffer[this.bufferOffset];
							}
							else if (formatValue == (int)MessagePackType.Bin16)
							{
								this.ReadToBuffer(2, throwOnEos: true);
								bytesCount = bitConverter.ToUInt16(this.buffer, this.bufferOffset);
							}
							else if (formatValue == (int)MessagePackType.Bin32)
							{
								this.ReadToBuffer(4, throwOnEos: true);
								bytesCount = bitConverter.ToUInt32(this.buffer, this.bufferOffset);
							}

							if (bytesCount > MAX_BINARY_LENGTH) throw ReaderException.BinaryDataIsTooLong(this, (int)bytesCount, MAX_BINARY_LENGTH);
							if (bytesCount < 0) throw ReaderException.ReadingBrokenDocument(this, "negative size of binary data");

							var bytes = this.ReadBytes(bytesCount, forceNewBuffer: true);
							this.node = new ReaderNode(ReaderToken.Value, bytes.Array);
							break;
						case MessagePackType.FixExt1:
						case MessagePackType.FixExt16:
						case MessagePackType.FixExt2:
						case MessagePackType.FixExt4:
						case MessagePackType.FixExt8:
						case MessagePackType.Ext32:
						case MessagePackType.Ext16:
						case MessagePackType.Ext8:
							var extLength = 0L;
							if (formatValue == (int)MessagePackType.FixExt1)
								extLength = 1;
							else if (formatValue == (int)MessagePackType.FixExt2)
								extLength = 2;
							else if (formatValue == (int)MessagePackType.FixExt4)
								extLength = 4;
							else if (formatValue == (int)MessagePackType.FixExt8)
								extLength = 8;
							else if (formatValue == (int)MessagePackType.FixExt16)
								extLength = 16;
							if (formatValue == (int)MessagePackType.Ext8)
							{
								this.ReadToBuffer(1, throwOnEos: true);
								extLength = this.buffer[this.bufferOffset];
							}
							else if (formatValue == (int)MessagePackType.Ext16)
							{
								this.ReadToBuffer(2, throwOnEos: true);
								extLength = bitConverter.ToUInt16(this.buffer, this.bufferOffset);
							}
							else if (formatValue == (int)MessagePackType.Ext32)
							{
								this.ReadToBuffer(4, throwOnEos: true);
								extLength = bitConverter.ToUInt32(this.buffer, this.bufferOffset);
							}

							this.ReadToBuffer(1, throwOnEos: true);
							var extType = buffer[this.bufferOffset];

							if (extLength > MAX_BINARY_LENGTH) throw ReaderException.BinaryDataIsTooLong(this, (int)extLength, MAX_BINARY_LENGTH);
							if (extLength < 0) throw ReaderException.ReadingBrokenDocument(this, "negative size of binary data");

							var data = this.ReadBytes(extLength, forceNewBuffer: true);
							if (!this.TryReadExtType(extType, data, out this.node))
								this.node = new ReaderNode(ReaderToken.Value, data.Array);
							break;
						case MessagePackType.False:
							this.node = new ReaderNode(ReaderToken.Value, this.Box(false));
							break;
						case MessagePackType.True:
							this.node = new ReaderNode(ReaderToken.Value, this.Box(true));
							break;
						case MessagePackType.Float32:
							this.ReadToBuffer(4, throwOnEos: true);
							this.node = new ReaderNode(ReaderToken.Value, this.Box(bitConverter.ToSingle(buffer, this.bufferOffset)));
							break;
						case MessagePackType.Float64:
							this.ReadToBuffer(8, throwOnEos: true);
							this.node = new ReaderNode(ReaderToken.Value, this.Box(bitConverter.ToDouble(buffer, this.bufferOffset)));
							break;
						case MessagePackType.Int16:
							this.ReadToBuffer(2, throwOnEos: true);
							this.node = new ReaderNode(ReaderToken.Value, this.Box(bitConverter.ToInt16(buffer, this.bufferOffset)));
							break;
						case MessagePackType.Int32:
							this.ReadToBuffer(4, throwOnEos: true);
							this.node = new ReaderNode(ReaderToken.Value, this.Box(bitConverter.ToInt32(buffer, this.bufferOffset)));
							break;
						case MessagePackType.Int64:
							this.ReadToBuffer(8, throwOnEos: true);
							this.node = new ReaderNode(ReaderToken.Value, this.Box(bitConverter.ToInt64(buffer, this.bufferOffset)));
							break;
						case MessagePackType.Int8:
							this.ReadToBuffer(1, throwOnEos: true);
							this.node = new ReaderNode(ReaderToken.Value, this.Box(unchecked((sbyte)buffer[this.bufferOffset])));
							break;
						case MessagePackType.UInt16:
							this.ReadToBuffer(2, throwOnEos: true);
							this.node = new ReaderNode(ReaderToken.Value, this.Box((uint)bitConverter.ToUInt16(buffer, this.bufferOffset)));
							break;
						case MessagePackType.UInt32:
							this.ReadToBuffer(4, throwOnEos: true);
							this.node = new ReaderNode(ReaderToken.Value, this.Box(bitConverter.ToUInt32(buffer, this.bufferOffset)));
							break;
						case MessagePackType.UInt64:
							this.ReadToBuffer(8, throwOnEos: true);
							this.node = new ReaderNode(ReaderToken.Value, this.Box(bitConverter.ToUInt64(buffer, this.bufferOffset)));
							break;
						case MessagePackType.UInt8:
							this.ReadToBuffer(1, throwOnEos: true);
							this.node = new ReaderNode(ReaderToken.Value, this.Box((uint)buffer[this.bufferOffset]));
							break;
						case MessagePackType.PositiveFixIntStart:
						case MessagePackType.PositiveFixIntEnd:
						case MessagePackType.FixMapStart:
						case MessagePackType.FixMapEnd:
						case MessagePackType.FixArrayStart:
						case MessagePackType.FixArrayEnd:
						case MessagePackType.FixStrStart:
						case MessagePackType.FixStrEnd:
						case MessagePackType.Unused:
						case MessagePackType.NegativeFixIntStart:
						case MessagePackType.NegativeFixIntEnd:
						default: throw ReaderException.UnknownMessagePackType(((MessagePackType)formatValue).ToString(), this);
					}
				}

				this.DecrementClosingTokenCounter();

				return true;
			}

			private bool ReadToBuffer(int bytesRequired, bool throwOnEos)
			{
				this.bufferAvailable -= this.bufferReaded;
				this.bufferOffset += this.bufferReaded;
				this.bufferReaded = 0;

				if (this.bufferAvailable < bytesRequired)
				{
					if (this.bufferAvailable > 0)
						Buffer.BlockCopy(this.buffer, this.bufferOffset, this.buffer, 0, this.bufferAvailable);

					this.bufferOffset = 0;
					while (this.bufferAvailable < bytesRequired)
					{
						var read = this.inputStream.Read(this.buffer, this.bufferAvailable, this.buffer.Length - this.bufferAvailable);
						this.bufferAvailable += read;

						if (read != 0 || this.bufferAvailable >= bytesRequired)
							continue;

						if (throwOnEos)
							throw ReaderException.UnexpectedEndOfStream(this);
						else
							return false;
					}
				}

				this.bufferReaded = bytesRequired;
				this.totalBytesReaded += bytesRequired;
				return true;
			}
			private ArraySegment<byte> ReadBytes(long bytesRequired, bool forceNewBuffer = false)
			{
				if (bytesRequired > int.MaxValue) throw new ArgumentOutOfRangeException("bytesRequired");

				this.bufferAvailable -= this.bufferReaded;
				this.bufferOffset += this.bufferReaded;
				this.bufferReaded = 0;

				if (this.bufferAvailable >= bytesRequired && !forceNewBuffer)
				{
					var bytes = new ArraySegment<byte>(this.buffer, this.bufferOffset, (int)bytesRequired);

					this.bufferAvailable -= (int)bytesRequired;
					this.bufferOffset += (int)bytesRequired;
					this.totalBytesReaded += (int)bytesRequired;

					return bytes;
				}
				else
				{
					var bytes = new byte[bytesRequired];
					var bytesOffset = 0;
					if (this.bufferAvailable > 0 && bytesOffset < bytes.Length)
					{
						var bytesToCopy = Math.Min(bytes.Length - bytesOffset, this.bufferAvailable);
						Buffer.BlockCopy(this.buffer, this.bufferOffset, bytes, bytesOffset, bytesToCopy);

						bytesOffset += bytesToCopy;
						this.bufferOffset += bytesToCopy;

						this.bufferAvailable -= bytesToCopy;
						this.totalBytesReaded += bytesToCopy;
					}

					if (this.bufferAvailable == 0)
						this.bufferOffset = 0;

					while (bytesOffset < bytes.Length)
					{
						var read = this.inputStream.Read(bytes, bytesOffset, bytes.Length - bytesOffset);

						bytesOffset += read;
						this.totalBytesReaded += read;

						if (read == 0 && bytesOffset < bytes.Length)
							throw ReaderException.UnexpectedEndOfStream(this);
					}

					return new ArraySegment<byte>(bytes, 0, bytes.Length);
				}
			}
			private bool TryReadExtType(byte extType, ArraySegment<byte> data, out ReaderNode node)
			{
				const byte EXTENSION_TYPE_TIMESTAMP = 255;
				const byte EXTENSION_TYPE_DATE_TIME = 40;
				const byte EXTENSION_TYPE_DATE_TIME_OFFSET = 41;
				const byte EXTENSION_TYPE_DECIMAL = 42;
				const byte EXTENSION_TYPE_GUID = 43;
				const byte GUID_SIZE = 16;
				const byte DECIMAL_SIZE = 16;
				const byte DATE_TIME_SIZE = 16;
				const byte DATE_TIME_OFFSET_SIZE = 16;

				node = default(ReaderNode);
				switch (extType)
				{
					case EXTENSION_TYPE_TIMESTAMP:
						unchecked
						{
							var seconds = 0L;
							var nanoSeconds = 0u;
							switch (data.Count)
							{
								case 4:
									seconds = this.bitConverter.ToInt32(data.Array, data.Offset);
									break;
								case 8:
									var data64 = this.bitConverter.ToUInt64(data.Array, data.Offset);
									seconds = (int) (data64 & 0x00000003ffffffffL);
									nanoSeconds = (uint) (data64 >> 34 & uint.MaxValue);
									break;
								case 12:
									nanoSeconds = this.bitConverter.ToUInt32(data.Array, data.Offset);
									seconds = this.bitConverter.ToInt64(data.Array, data.Offset + 4);
									break;
								default:
									return false;
							}
							node = new ReaderNode(ReaderToken.Value, this.Box(TimeSpan.FromSeconds(seconds).Add(TimeSpan.FromTicks(nanoSeconds / 100))));
							return true;
						}
					case EXTENSION_TYPE_DATE_TIME:
						if (data.Count != DATE_TIME_SIZE)
							return false;
							var dateTime = new DateTime(this.bitConverter.ToInt64(data.Array, data.Offset + 1), (DateTimeKind)data.Array[data.Offset]);
							node = new ReaderNode(ReaderToken.Value, this.Box(dateTime));
						return true;
					case EXTENSION_TYPE_DATE_TIME_OFFSET:
						if (data.Count != DATE_TIME_OFFSET_SIZE)
							return false;
						var offset = new TimeSpan(this.bitConverter.ToInt64(data.Array, data.Offset + 8));
						var ticks = this.bitConverter.ToInt64(data.Array, data.Offset);
						var dateTimeOffset = new DateTimeOffset(ticks, offset);
						node = new ReaderNode(ReaderToken.Value, this.Box(dateTimeOffset));
						return true;
					case EXTENSION_TYPE_DECIMAL:
						if (data.Count != DECIMAL_SIZE)
							return false;
						var decimalValue = this.bitConverter.ToDecimal(data.Array, data.Offset);
						node = new ReaderNode(ReaderToken.Value, this.Box(decimalValue));
						return true;
					case EXTENSION_TYPE_GUID:
						if (data.Count != GUID_SIZE)
							return false;

						var buffer = data.Array;
						unchecked
						{
							var guidValue = new Guid
							(
									(uint)(buffer[data.Offset + 3] << 24 | buffer[data.Offset + 2] << 16 | buffer[data.Offset + 1] << 8 | buffer[data.Offset + 0]),
									(ushort)(buffer[data.Offset + 5] << 8 | buffer[data.Offset + 4]),
									(ushort)(buffer[data.Offset + 7] << 8 | buffer[data.Offset + 6]),
									buffer[data.Offset + 8],
									buffer[data.Offset + 9],
									buffer[data.Offset + 10],
									buffer[data.Offset + 11],
									buffer[data.Offset + 12],
									buffer[data.Offset + 13],
									buffer[data.Offset + 14],
									buffer[data.Offset + 15]
							);

							node = new ReaderNode(ReaderToken.Value, this.Box(guidValue));
							return true;
						}
					default:
						return false;
				}
			}

			private object Box(int value)
			{
				if (this.int32Box == null)
					this.int32Box = new StrongBox<int>(CultureInfo.InvariantCulture);

				this.int32Box.Store(value);

				return this.int32Box;
			}
			private object Box(uint value)
			{
				if (this.uInt32Box == null)
					this.uInt32Box = new StrongBox<uint>(CultureInfo.InvariantCulture);

				this.uInt32Box.Store(value);

				return this.uInt32Box;
			}
			private object Box(long value)
			{
				if (this.int64Box == null)
					this.int64Box = new StrongBox<long>(CultureInfo.InvariantCulture);

				this.int64Box.Store(value);

				return this.int64Box;
			}
			private object Box(ulong value)
			{
				if (this.uInt64Box == null)
					this.uInt64Box = new StrongBox<ulong>(CultureInfo.InvariantCulture);

				this.uInt64Box.Store(value);

				return this.uInt64Box;
			}
			private object Box(float value)
			{
				if (this.singleBox == null)
					this.singleBox = new StrongBox<float>(CultureInfo.InvariantCulture);

				this.singleBox.Store(value);

				return this.singleBox;
			}
			private object Box(double value)
			{
				if (this.doubleBox == null)
					this.doubleBox = new StrongBox<double>(CultureInfo.InvariantCulture);

				this.doubleBox.Store(value);

				return this.doubleBox;
			}
			private object Box(decimal value)
			{
				if (this.decimalBox == null)
					this.decimalBox = new StrongBox<decimal>(CultureInfo.InvariantCulture);

				this.decimalBox.Store(value);

				return this.decimalBox;
			}
			private object Box(DateTime value)
			{
				if (this.dateBox == null)
					this.dateBox = new StrongBox<DateTime>(CultureInfo.InvariantCulture);

				this.dateBox.Store(value);
				return this.dateBox;
			}
			private object Box(DateTimeOffset value)
			{
				if (this.dateOffsetBox == null)
					this.dateOffsetBox = new StrongBox<DateTimeOffset>(CultureInfo.InvariantCulture);

				this.dateOffsetBox.Store(value);
				return this.dateOffsetBox;
			}
			private object Box(TimeSpan value)
			{
				if (this.timeSpanBox == null)
					this.timeSpanBox = new StrongBox<TimeSpan>(CultureInfo.InvariantCulture);

				this.timeSpanBox.Store(value);
				return this.timeSpanBox;
			}
			private object Box(Guid value)
			{
				if (this.guidBox == null)
					this.guidBox = new StrongBox<Guid>(CultureInfo.InvariantCulture);

				this.guidBox.Store(value);
				return this.guidBox;
			}
			private object Box(bool value)
			{
				if (value)
				{
					if (this.trueBox == null)
						this.trueBox = new StrongBox<bool>(true, CultureInfo.InvariantCulture);
					return trueBox;
				}
				else
				{
					if (this.falseBox == null)
						this.falseBox = new StrongBox<bool>(false, CultureInfo.InvariantCulture);
					return falseBox;
				}
			}

			private void DecrementClosingTokenCounter()
			{
				if (this.maps.Count > 0)
				{
					var closingToken = this.maps.Pop();
					closingToken.Counter--;
					this.maps.Push(closingToken);
				}
			}

			public void Dispose()
			{
				if (this.leaveOpen == false)
					this.inputStream.Dispose();
			}


			private enum MessagePackType : byte
			{
				PositiveFixIntStart = 0x00,
				PositiveFixIntEnd = 0x7f,
				FixMapStart = 0x80,
				FixMapEnd = 0x8f,
				FixArrayStart = 0x90,
				FixArrayEnd = 0x9f,
				FixStrStart = 0xa0,
				FixStrEnd = 0xbf,
				Nil = 0xc0,
				Unused = 0xc1,
				False = 0xc2,
				True = 0xc3,
				Bin8 = 0xc4,
				Bin16 = 0xc5,
				Bin32 = 0xc6,
				Ext8 = 0xc7,
				Ext16 = 0xc8,
				Ext32 = 0xc9,
				Float32 = 0xca,
				Float64 = 0xcb,
				UInt8 = 0xcc,
				UInt16 = 0xcd,
				UInt32 = 0xce,
				UInt64 = 0xcf,
				Int8 = 0xd0,
				Int16 = 0xd1,
				Int32 = 0xd2,
				Int64 = 0xd3,
				FixExt1 = 0xd4,
				FixExt2 = 0xd5,
				FixExt4 = 0xd6,
				FixExt8 = 0xd7,
				FixExt16 = 0xd8,
				Str8 = 0xd9,
				Str16 = 0xda,
				Str32 = 0xdb,
				Array16 = 0xdc,
				Array32 = 0xdd,
				Map16 = 0xde,
				Map32 = 0xdf,
				NegativeFixIntStart = 0xe0,
				NegativeFixIntEnd = 0xff
			}

			private enum MessagePackExtentionType : byte
			{
				None = 0,
				DateTime = 40,
				DateTimeOffset = 41,
				Decimal = 42
			}
		}
		#endregion

		#region EndianBitConverter by Jon Skeet and Marc Gravell
		/* "Miscellaneous Utility Library" Software Licence

		Version 1.0

		Copyright (c) 2004-2008 Jon Skeet and Marc Gravell.
		All rights reserved.

		Redistribution and use in source and binary forms, with or without
		modification, are permitted provided that the following conditions
		are met:

		1. Redistributions of source code must retain the above copyright
		notice, this list of conditions and the following disclaimer.

		2. Redistributions in binary form must reproduce the above copyright
		notice, this list of conditions and the following disclaimer in the
		documentation and/or other materials provided with the distribution.

		3. The end-user documentation included with the redistribution, if
		any, must include the following acknowledgment:

		"This product includes software developed by Jon Skeet
		and Marc Gravell. Contact skeet@pobox.com, or see
		http://www.pobox.com/~skeet/)."

		Alternately, this acknowledgment may appear in the software itself,
		if and wherever such third-party acknowledgments normally appear.

		4. The name "Miscellaneous Utility Library" must not be used to endorse
		or promote products derived from this software without prior written
		permission. For written permission, please contact skeet@pobox.com.

		5. Products derived from this software may not be called
		"Miscellaneous Utility Library", nor may "Miscellaneous Utility Library"
		appear in their name, without prior written permission of Jon Skeet.

		THIS SOFTWARE IS PROVIDED "AS IS" AND ANY EXPRESSED OR IMPLIED
		WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
		MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
		IN NO EVENT SHALL JON SKEET BE LIABLE FOR ANY DIRECT, INDIRECT,
		INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
		BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
		LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
		CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
		LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
		ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
		POSSIBILITY OF SUCH DAMAGE.
		*/

		internal enum Endianness
		{
			LittleEndian,

			BigEndian
		}

		private abstract class EndianBitConverter
		{
			#region Endianness of this converter

			public abstract bool IsLittleEndian();

			public abstract Endianness Endianness { get; }

			#endregion

			#region Factory properties

			private static readonly LittleEndianBitConverter little = new LittleEndianBitConverter();

			public static LittleEndianBitConverter Little
			{
				get { return little; }
			}

			private static readonly BigEndianBitConverter big = new BigEndianBitConverter();

			public static BigEndianBitConverter Big
			{
				get { return big; }
			}

			#endregion

			#region Double/primitive conversions

			public long DoubleToInt64Bits(double value)
			{
				return BitConverter.DoubleToInt64Bits(value);
			}

			public double Int64BitsToDouble(long value)
			{
				return BitConverter.Int64BitsToDouble(value);
			}

			public int SingleToInt32Bits(float value)
			{
				return new Int32SingleUnion(value).AsInt32;
			}

			public float Int32BitsToSingle(int value)
			{
				return new Int32SingleUnion(value).AsSingle;
			}

			#endregion

			#region To(PrimitiveType) conversions

			public bool ToBoolean(byte[] value, int startIndex)
			{
				CheckByteArgument(value, startIndex, 1);
				return BitConverter.ToBoolean(value, startIndex);
			}

			public char ToChar(byte[] value, int startIndex)
			{
				return unchecked((char)(CheckedFromBytes(value, startIndex, 2)));
			}

			public double ToDouble(byte[] value, int startIndex)
			{
				return Int64BitsToDouble(ToInt64(value, startIndex));
			}

			public float ToSingle(byte[] value, int startIndex)
			{
				return Int32BitsToSingle(ToInt32(value, startIndex));
			}

			public short ToInt16(byte[] value, int startIndex)
			{
				return unchecked((short)(CheckedFromBytes(value, startIndex, 2)));
			}

			public int ToInt32(byte[] value, int startIndex)
			{
				return unchecked((int)(CheckedFromBytes(value, startIndex, 4)));
			}

			public long ToInt64(byte[] value, int startIndex)
			{
				return CheckedFromBytes(value, startIndex, 8);
			}

			public ushort ToUInt16(byte[] value, int startIndex)
			{
				return unchecked((ushort)(CheckedFromBytes(value, startIndex, 2)));
			}

			public uint ToUInt32(byte[] value, int startIndex)
			{
				return unchecked((uint)(CheckedFromBytes(value, startIndex, 4)));
			}

			public ulong ToUInt64(byte[] value, int startIndex)
			{
				return unchecked((ulong)(CheckedFromBytes(value, startIndex, 8)));
			}

			private static void CheckByteArgument(byte[] value, int startIndex, int bytesRequired)
			{
				if (value == null)
				{
					throw new ArgumentNullException("value");
				}
				if (startIndex < 0 || startIndex > value.Length - bytesRequired)
				{
					throw new ArgumentOutOfRangeException("startIndex");
				}
			}

			private long CheckedFromBytes(byte[] value, int startIndex, int bytesToConvert)
			{
				CheckByteArgument(value, startIndex, bytesToConvert);
				return FromBytes(value, startIndex, bytesToConvert);
			}

			protected abstract long FromBytes(byte[] value, int startIndex, int bytesToConvert);

			#endregion

			#region ToString conversions

			public static string ToString(byte[] value)
			{
				return BitConverter.ToString(value);
			}

			public static string ToString(byte[] value, int startIndex)
			{
				return BitConverter.ToString(value, startIndex);
			}

			public static string ToString(byte[] value, int startIndex, int length)
			{
				return BitConverter.ToString(value, startIndex, length);
			}

			#endregion

			#region	Decimal conversions

			public decimal ToDecimal(byte[] value, int startIndex)
			{
				// HACK: This always assumes four parts, each in their own endianness,
				// starting with the first part at the start of the byte array.
				// On the other hand, there's no real format specified...
				var parts = new int[4];
				for (var i = 0; i < 4; i++)
				{
					parts[i] = ToInt32(value, startIndex + i * 4);
				}
				return new decimal(parts);
			}

			public byte[] GetBytes(decimal value)
			{
				var bytes = new byte[16];
				var parts = decimal.GetBits(value);
				for (var i = 0; i < 4; i++)
				{
					CopyBytesImpl(parts[i], 4, bytes, i * 4);
				}
				return bytes;
			}

			public void CopyBytes(decimal value, byte[] buffer, int index)
			{
				var parts = decimal.GetBits(value);
				for (var i = 0; i < 4; i++)
				{
					CopyBytesImpl(parts[i], 4, buffer, i * 4 + index);
				}
			}

			#endregion

			#region GetBytes conversions

			private byte[] GetBytes(long value, int bytes)
			{
				var buffer = new byte[bytes];
				CopyBytes(value, bytes, buffer, 0);
				return buffer;
			}

			public byte[] GetBytes(bool value)
			{
				return BitConverter.GetBytes(value);
			}

			public byte[] GetBytes(char value)
			{
				return GetBytes(value, 2);
			}

			public byte[] GetBytes(double value)
			{
				return GetBytes(DoubleToInt64Bits(value), 8);
			}

			public byte[] GetBytes(short value)
			{
				return GetBytes(value, 2);
			}

			public byte[] GetBytes(int value)
			{
				return GetBytes(value, 4);
			}

			public byte[] GetBytes(long value)
			{
				return GetBytes(value, 8);
			}

			public byte[] GetBytes(float value)
			{
				return GetBytes(SingleToInt32Bits(value), 4);
			}

			public byte[] GetBytes(ushort value)
			{
				return GetBytes(value, 2);
			}

			public byte[] GetBytes(uint value)
			{
				return GetBytes(value, 4);
			}

			public byte[] GetBytes(ulong value)
			{
				return GetBytes(unchecked((long)value), 8);
			}

			#endregion

			#region CopyBytes conversions

			private void CopyBytes(long value, int bytes, byte[] buffer, int index)
			{
				if (buffer == null)
				{
					throw new ArgumentNullException("buffer", "Byte array must not be null");
				}
				if (buffer.Length < index + bytes)
				{
					throw new ArgumentOutOfRangeException("Buffer not big enough for value");
				}
				CopyBytesImpl(value, bytes, buffer, index);
			}

			protected abstract void CopyBytesImpl(long value, int bytes, byte[] buffer, int index);

			public void CopyBytes(bool value, byte[] buffer, int index)
			{
				CopyBytes(value ? 1 : 0, 1, buffer, index);
			}

			public void CopyBytes(char value, byte[] buffer, int index)
			{
				CopyBytes(value, 2, buffer, index);
			}

			public void CopyBytes(double value, byte[] buffer, int index)
			{
				CopyBytes(DoubleToInt64Bits(value), 8, buffer, index);
			}

			public void CopyBytes(short value, byte[] buffer, int index)
			{
				CopyBytes(value, 2, buffer, index);
			}

			public void CopyBytes(int value, byte[] buffer, int index)
			{
				CopyBytes(value, 4, buffer, index);
			}

			public void CopyBytes(long value, byte[] buffer, int index)
			{
				CopyBytes(value, 8, buffer, index);
			}

			public void CopyBytes(float value, byte[] buffer, int index)
			{
				CopyBytes(SingleToInt32Bits(value), 4, buffer, index);
			}

			public void CopyBytes(ushort value, byte[] buffer, int index)
			{
				CopyBytes(value, 2, buffer, index);
			}

			public void CopyBytes(uint value, byte[] buffer, int index)
			{
				CopyBytes(value, 4, buffer, index);
			}

			public void CopyBytes(ulong value, byte[] buffer, int index)
			{
				CopyBytes(unchecked((long)value), 8, buffer, index);
			}

			#endregion

			#region Private struct used for Single/Int32 conversions

			[StructLayout(LayoutKind.Explicit)]
			private struct Int32SingleUnion
			{
				[FieldOffset(0)]
				private readonly int i;

				[FieldOffset(0)]
				private readonly float f;

				internal Int32SingleUnion(int i)
				{
					this.f = 0; // Just to keep the compiler happy
					this.i = i;
				}

				internal Int32SingleUnion(float f)
				{
					this.i = 0; // Just to keep the compiler happy
					this.f = f;
				}

				internal int AsInt32
				{
					get { return i; }
				}

				internal float AsSingle
				{
					get { return f; }
				}
			}

			#endregion
		}

		private sealed class BigEndianBitConverter : EndianBitConverter
		{
			public sealed override bool IsLittleEndian()
			{
				return false;
			}

			public sealed override Endianness Endianness
			{
				get { return Endianness.BigEndian; }
			}

			protected override void CopyBytesImpl(long value, int bytes, byte[] buffer, int index)
			{
				var endOffset = index + bytes - 1;
				for (var i = 0; i < bytes; i++)
				{
					buffer[endOffset - i] = unchecked((byte)(value & 0xff));
					value = value >> 8;
				}
			}

			protected override long FromBytes(byte[] buffer, int startIndex, int bytesToConvert)
			{
				long ret = 0;
				for (var i = 0; i < bytesToConvert; i++)
				{
					ret = unchecked((ret << 8) | buffer[startIndex + i]);
				}
				return ret;
			}
		}

		private sealed class LittleEndianBitConverter : EndianBitConverter
		{
			public sealed override bool IsLittleEndian()
			{
				return true;
			}

			public sealed override Endianness Endianness
			{
				get { return Endianness.LittleEndian; }
			}

			protected override void CopyBytesImpl(long value, int bytes, byte[] buffer, int index)
			{
				for (var i = 0; i < bytes; i++)
				{
					buffer[i + index] = unchecked((byte)(value & 0xff));
					value = value >> 8;
				}
			}

			protected override long FromBytes(byte[] buffer, int startIndex, int bytesToConvert)
			{
				long ret = 0;
				for (var i = 0; i < bytesToConvert; i++)
				{
					ret = unchecked((ret << 8) | buffer[startIndex + bytesToConvert - 1 - i]);
				}
				return ret;
			}
		}

		/* end of Jon Skeet and Marc Gravell code */
		#endregion

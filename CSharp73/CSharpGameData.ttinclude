<#@ include file="./Formulas.ttinclude" once="true" #>
<#@ include file="./ObjectModel.ttinclude" once="true" #>
<#@ include file="./Formatters.ttinclude" once="true" #>
<#@ include file="./SupportTypes.ttinclude" once="true" #>
<#@ include file="./Models/Enums.ttinclude" once="true" #>
<#@ include file="./Models/Formulas.ttinclude" once="true" #>
<#@ include file="./Models/GameData.ttinclude" once="true" #>
<#@ include file="./Models/Classes.ttinclude" once="true" #>
<#@ include file="./Models/DocumentCollectionExtensions.ttinclude" once="true" #>
<#
	this.GenerationEnvironment.Length = 0; // clean any whitespace before generation

	var optimizations = this.Optimizations ?? Array.Empty<SourceCodeGenerationOptimizations>();
	var context = new CodeGenerationContext(this.GameDataPath, new CSharpLanguage {
		Namespace = this.Namespace,
		GameDataClassName = this.GameDataClassName,
		DocumentClassName = this.DocumentClassName,
		DocumentReferenceClassName = this.DocumentClassName + "Reference",
	}) {
		ToolsName = System.Reflection.Assembly.GetEntryAssembly()?.GetName().Name ?? "CSharp73GameDataGenerator.tt",
		ToolsVersion = this.GetType().Assembly.GetName().Version.ToString(),
		EagerReferenceResolution = optimizations.Contains(SourceCodeGenerationOptimizations.EagerReferenceResolution),
		RawReferences = optimizations.Contains(SourceCodeGenerationOptimizations.RawReferences),
		RawLocalizedStrings = optimizations.Contains(SourceCodeGenerationOptimizations.RawLocalizedStrings),
		DisablePatching = optimizations.Contains(SourceCodeGenerationOptimizations.DisablePatching),
		DisableStringPooling = optimizations.Contains(SourceCodeGenerationOptimizations.DisableStringPooling),
		DisableJsonSerialization = optimizations.Contains(SourceCodeGenerationOptimizations.DisableJsonSerialization),
		DisableMessagePackSerialization = optimizations.Contains(SourceCodeGenerationOptimizations.DisableMessagePackSerialization)
	};

	foreach (var typeDef in context.ObjectModel.Types)
	{
		WriteFile(typeDef.TypeName, context, () =>
			this.WriteClass(typeDef, context));
	}

	foreach (var enumDef in context.ObjectModel.Enums)
	{
		WriteFile(enumDef.TypeName, context, () =>
			this.WriteEnum(enumDef, context));
	}

	foreach (var formulaDef in context.ObjectModel.Formulas)
	{
		WriteFile(formulaDef.TypeName, context, () =>
			this.WriteFormula(formulaDef, context));
	}

	WriteFile(context.TargetLanguage.GameDataClassName, context, () =>
		this.WriteGameDataClass(context));

	WriteFile(context.TargetLanguage.DocumentClassName, context, () =>
		this.WriteDocumentBaseClass(context));

	WriteFile(context.TargetLanguage.DocumentReferenceClassName, context, () =>
		this.WriteDocumentReferenceBaseClass(context));

	WriteFile(context.TargetLanguage.DocumentReferenceListClassName, context, () =>
		this.WriteDocumentReferenceCollection(context));

	WriteFile(context.TargetLanguage.DocumentCollectionClassName, context, () =>
		this.WriteDocumentCollection(context));

	WriteFile(context.TargetLanguage.DocumentCollectionClassName + "Extensions", context, () =>
		this.WriteDocumentCollectionExtensions(context));

	WriteFile(context.TargetLanguage.LocalizedStringClassName, context, () =>
		this.WriteLocalizedString(context));

	WriteFile("Formatters", context, () =>
	{
#>
	public static class Formatters
	{
<#
		WriteFormatters();
#>
	}
<#
	});

	WriteFile("Formulas", context, () =>
	{
#>
#if !SUPPRESS_BUILD_IN_FORMULAS
	public static class Formulas
	{
	<#
		WriteFormulas();
#>
	}
#endif
<#
	});
#>

<#+
	private void WriteFile(string fileName, CodeGenerationContext context, Action writeBodyAction)
	{
#>
/* # move to <#= fileName #>.cs */

//
// The source code was generated by the Charon, GameDevWare, 2024
// License: MIT
//
//------------------------------------------------------------------------------
// <auto-generated>
//	 This code was generated by a tool.
//	 Changes to this file may cause incorrect behavior and will be lost if
//	 the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// ReSharper disable All


namespace <#= context.TargetLanguage.Namespace #>
{
	using System;
	using System.Linq;
	using System.IO;
	using System.Text;
	using System.Globalization;
	using System.Collections;
	using System.Collections.Generic;
	using System.Collections.ObjectModel;
	using System.CodeDom.Compiler;
	using System.Runtime.InteropServices;
	using System.Runtime.Serialization;
	using System.Linq.Expressions;
	using System.Threading;
	using System.Reflection;
	using System.Diagnostics;

<#+
		writeBodyAction();
#>
}
<#+
	}
#>

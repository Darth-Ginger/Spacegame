<#+
	private void WriteReadGameDataMergeCode(CodeGenerationContext context)
	{
		if (context.DisablePatching)
		{
			return;
		}
#>
		#region Merge Game Data

		public Formatters.IndexedDictionary<string, object> MergeGameData(IReadOnlyDictionary<string, object> gameDataDocument, IReadOnlyDictionary<string, object> patchDocument)
		{
			gameDataDocument.TryGetValue("Collections", out var gameDataCollectionsObj);
			var gameDataCollections = gameDataCollectionsObj as IReadOnlyDictionary<string, object> ?? new Formatters.IndexedDictionary<string,object>();
			patchDocument.TryGetValue("Collections", out var patchCollectionsObj);
			var patchCollections = patchCollectionsObj as IReadOnlyDictionary<string, object> ?? new Formatters.IndexedDictionary<string,object>();

			var newGameDataDocument = new Formatters.IndexedDictionary<string, object>(gameDataDocument);
			var newCollections = new Formatters.IndexedDictionary<string, object>(gameDataCollections);
			newGameDataDocument["Collections"] = newCollections;

			var visitedSchemas = new HashSet<string>(StringComparer.Ordinal);
			foreach (var schemaName in gameDataCollections.Keys.Concat(patchCollections.Keys))
			{
				if (visitedSchemas.Contains(schemaName)) {
					continue; // already has been visited
				}

				var gameDataDocumentCollection = default(object);
				var patchDocumentCollection = default(object);
#pragma warning disable 1522 // Empty switch block
				switch (schemaName)
				{
<#+
		foreach (var typeDef in context.ObjectModel.Types)
		{
#>
					case "<#= typeDef.Schema.Id #>":
					case "<#= typeDef.Schema.Name #>":
						visitedSchemas.Add("<#= typeDef.Schema.Id #>");
						visitedSchemas.Add("<#= typeDef.Schema.Name #>");

						if (!gameDataCollections.TryGetValue("<#= typeDef.Schema.Id #>", out gameDataDocumentCollection)) {
							gameDataCollections.TryGetValue("<#= typeDef.Schema.Name #>", out gameDataDocumentCollection);
						}
						if (!patchCollections.TryGetValue("<#= typeDef.Schema.Id #>", out patchDocumentCollection)) {
							patchCollections.TryGetValue("<#= typeDef.Schema.Name #>", out patchDocumentCollection);
						}

						if (gameDataDocumentCollection == null || patchDocumentCollection == null)
						{
							newCollections["<#= typeDef.Schema.Name #>"] = gameDataDocumentCollection ?? patchDocumentCollection;
						}
						else
						{
							newCollections["<#= typeDef.Schema.Name #>"] = MergeDocumentCollection<<#= typeDef #>>(gameDataDocumentCollection, patchDocumentCollection, purgeRest: false);
						}
						break;
<#+
		}
#>
				}
#pragma warning restore 1522

			}

			return newGameDataDocument;
		}

		public object MergeDocument<DocumentT>(IReadOnlyDictionary<string, object> originalDocument, IReadOnlyDictionary<string, object> modifiedDocument)
		{
			var mergedDocument = new Formatters.IndexedDictionary<string, object>(Math.Max(originalDocument.Count, modifiedDocument.Count) + 5);

<#+
		foreach (var typeDef in context.ObjectModel.Types)
		{
#>
			if (typeof(DocumentT) == typeof(<#= typeDef #>))
			{
<#+
			foreach (var propertyDef in typeDef.Properties)
			{
				if (propertyDef.DataType == DataType.ReferenceCollection || propertyDef.DataType == DataType.DocumentCollection)
				{
#>
				MergeValue<object>(mergedDocument, originalDocument, modifiedDocument, "<#= propertyDef.SchemaProperty.Name #>", (original, modified) => MergeDocumentCollection<<#= propertyDef.DocumentOrReferenceType #>>(original, modified, purgeRest:true));
<#+
				}
				else if (propertyDef.DataType == DataType.Document)
				{
#>
				MergeValue<IReadOnlyDictionary<string, object>>(mergedDocument, originalDocument, modifiedDocument, "<#= propertyDef.SchemaProperty.Name #>", (original, modified) => MergeDocument<<#= propertyDef.DocumentOrReferenceType #>>(original, modified));
<#+
				}
				else if (propertyDef.DataType == DataType.LocalizedText)
				{
#>
				MergeValue<IReadOnlyDictionary<string, object>>(mergedDocument, originalDocument, modifiedDocument, "<#= propertyDef.SchemaProperty.Name #>", (original, modified) => MergeLocalizedString(original, modified));
<#+
				}
				else
				{
#>
				MergeValue<object>(mergedDocument, originalDocument, modifiedDocument, "<#= propertyDef.SchemaProperty.Name #>");
<#+
				}
			}
#>
			}
<#+
		}
#>
			return mergedDocument;
		}

		private static void MergeValue<ValueT>(Formatters.IndexedDictionary<string, object> mergedDocument, IReadOnlyDictionary<string, object> originalDocument, IReadOnlyDictionary<string, object> modifiedDocument, string propertyName, Func<ValueT, ValueT, object> mergeFunc = null)
		{
			if (originalDocument == null) throw new ArgumentNullException(nameof(originalDocument));
			if (modifiedDocument == null) throw new ArgumentNullException(nameof(modifiedDocument));
			if (propertyName == null) throw new ArgumentNullException(nameof(propertyName));

			var originalValueExists = originalDocument.TryGetValue(propertyName, out var originalValue);
			var modifiedValueExists = modifiedDocument.TryGetValue(propertyName, out var modifiedValue);

			if (!originalValueExists && !modifiedValueExists)
			{
				return; // nothing to merge
			}

			object mergedValue;
			if (originalValue != null && !modifiedValueExists)
			{
				// unchanged
				mergedValue = originalValue;
			}
			else if (originalValue == null && modifiedValue != null)
			{
				// created
				mergedValue = modifiedValue;
			}
			else if (originalValue != null && modifiedValueExists && modifiedValue == null)
			{
				// deleted
				mergedValue = null;
			}
			else if (originalValue is ValueT originalTypedValue &&
					modifiedValue is ValueT modifiedTypedValue)
			{
				// modified => merge
				if (mergeFunc != null)
				{
					mergedValue = mergeFunc(originalTypedValue, modifiedTypedValue);
				}
				else
				{
					mergedValue = modifiedValue;
				}
			}
			else
			{
				// keep original
				mergedValue = originalValue;
			}

			mergedDocument[propertyName] = mergedValue;
		}

		public object MergeDocumentCollection<DocumentT>(object originalDocumentCollection, object modifiedDocumentCollection, bool purgeRest)
		{
			if (modifiedDocumentCollection == null && !purgeRest)
			{
				return Array.Empty<object>();
			}

			var originalCollectionById = ToDocumentsById(originalDocumentCollection);
			var modifiedCollectionById = ToDocumentsById(modifiedDocumentCollection);
			var collection = new Formatters.IndexedDictionary<string, object>(Math.Max(originalCollectionById.Count, modifiedCollectionById.Count) + 5);
			var keys = purgeRest ? modifiedCollectionById.Keys : originalCollectionById.Keys.Union(modifiedCollectionById.Keys);
			foreach (var id in keys)
			{
				var originalValueExists = originalCollectionById.TryGetValue(id, out var originalValue);
				var modifiedValueExists = modifiedCollectionById.TryGetValue(id, out var modifiedValue);
				var originalIsDeleted = originalValueExists && originalValue == null;

				object mergedDocument;
				if (originalValue != null && !modifiedValueExists)
				{
					// unchanged
					mergedDocument = originalValue;
				}
				else if (originalIsDeleted)
				{
					mergedDocument = null; // keep deleted documents as deleted
				}
				else if (originalValue == null && modifiedValue != null)
				{
					// created
					mergedDocument = modifiedValue;
				}
				else if (originalValue != null && modifiedValueExists && modifiedValue == null)
				{
					// deleted
					mergedDocument = null;
				}
				else if (originalValue is IReadOnlyDictionary<string, object> originalValueDocument &&
						modifiedValue is IReadOnlyDictionary<string, object> modifiedValueDocument)
				{
					// modified
					mergedDocument = MergeDocument<DocumentT>(originalValueDocument, modifiedValueDocument);
				}
				else
				{
					// keep original
					mergedDocument = originalValue;
				}

				collection.Add(id, mergedDocument);
			}
			return collection;
		}

		private static object MergeLocalizedString(IReadOnlyDictionary<string, object> originalLocalizedText, IReadOnlyDictionary<string, object> modifiedLocalizedText)
		{
			if (originalLocalizedText == null && modifiedLocalizedText == null)
			{
				return null;
			}
			else if (originalLocalizedText != null && modifiedLocalizedText == null)
			{
				return null;
			}
			else if (originalLocalizedText == null)
			{
				return modifiedLocalizedText;
			}
			else if (LocalizedStringAreEquals(originalLocalizedText, modifiedLocalizedText))
			{
				return originalLocalizedText;
			}

			var mergedLocalizedString = new Formatters.IndexedDictionary<string, object>();
			foreach (var languageId in originalLocalizedText.Keys.Union(modifiedLocalizedText.Keys))
			{
				if (modifiedLocalizedText.ContainsKey(languageId) == false)
				{
					originalLocalizedText.TryGetValue(languageId, out var originalText);
					mergedLocalizedString[languageId] = originalText;
				}
				else
				{
					modifiedLocalizedText.TryGetValue(languageId, out var modifiedText);
					mergedLocalizedString[languageId] = modifiedText;
				}
			}
			return mergedLocalizedString;
		}

		private static bool LocalizedStringAreEquals(IReadOnlyDictionary<string, object> x, IReadOnlyDictionary<string, object> y)
		{
			if (ReferenceEquals(x, y)) return true;
			if (ReferenceEquals(x, null)) return false;
			if (ReferenceEquals(y, null)) return false;
			if (x.GetType() != y.GetType()) return false;
			if (x.Count != y.Count) return false;

			foreach (var kv in x)
			{
				var xValue = kv.Value;
				y.TryGetValue(kv.Key, out var yValue);
				if (StringComparer.Ordinal.Equals(xValue as string, yValue as string) == false)
				{
					return false;
				}
			}
			return true;
		}

		public IReadOnlyDictionary<string, object> ToDocumentsById(object gameDataDocumentCollection)
		{
			if (gameDataDocumentCollection is IReadOnlyDictionary<string, object> documentsById)
			{
				return documentsById;
			}
			else if (gameDataDocumentCollection is IReadOnlyList<object> list)
			{
				var newDocumentsById = new Formatters.IndexedDictionary<string, object>(list.Count);
				foreach (var documentObj in list)
				{
					if (documentObj is IReadOnlyDictionary<string, object> document &&
						document.TryGetValue("Id", out var idObj) &&
						idObj != null)
					{
						var idStr = Convert.ToString(idObj, CultureInfo.InvariantCulture);
						newDocumentsById[idStr] = documentObj;
					}
				}
				return newDocumentsById;
			}
			else
			{
				return new Formatters.IndexedDictionary<string, object>();
			}
		}

		#endregion
<#+
	}
#>
